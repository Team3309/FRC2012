/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2008. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package edu.wpi.first.wpilibj.templates;


import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.templates.commands.CommandBase;
import edu.wpi.first.wpilibj.templates.commands.ExampleCommand;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class RobotTemplate extends IterativeRobot {

    Command autonomousCommand;
    
    CANJaguar fl, rl, fr, rr;
    RobotDrive drive;
    Joystick joystick;
    
    Accelerometer ac;
    Gyro gyro;
    
    double initialAngle = 0;
    boolean balancing = false;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        // instantiate the command used for the autonomous period
        autonomousCommand = new ExampleCommand();

        // Initialize all subsystems
        CommandBase.init();
        
        ac = new Accelerometer(1);
        gyro = new Gyro(1, 1);
        
        joystick = new Joystick(1);
        try {
            fl = new CANJaguar(2);
            rl = new CANJaguar(5);
            fr = new CANJaguar(4);
            rr = new CANJaguar(3);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        
        drive = new RobotDrive(fl, rl, fr, rr);
    }
    
    public void disabledInit(){
        balancing = false;
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        if(!balancing) drive.mecanumDrive_Cartesian(joystick.getX(), joystick.getY(), joystick.getTwist(), 0);
        if(joystick.getRawButton(12)){
            balancing = true;
            initialAngle = gyro.getAngle();
        }
        if(balancing){
            if(Math.abs(initialAngle - gyro.getAngle()) < 2){
                drive.mecanumDrive_Cartesian(0, -.25, 0, 0);
            }else{
                drive.mecanumDrive_Cartesian(0, .06, 0, 0);